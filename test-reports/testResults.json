{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-04T20:11:32.779Z",
    "end": "2024-12-04T20:11:55.284Z",
    "duration": 22505,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e9367400-5d12-449b-886a-883d168ba951",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "559342d4-c938-42e8-8f6f-a68d180b422a",
          "title": "add item tests",
          "fullFile": "/Users/bethhughes/Desktop/coding/projects/jet-set-go/test/testOne.js",
          "file": "/test/testOne.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "adds an item to the list",
              "fullTitle": "add item tests adds an item to the list",
              "timedOut": null,
              "duration": 12542,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { expect } = await import(\"chai\");\n// const chai = await import(\"chai\");\n// const should = chai.should(); // Initialize 'should'\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n// navigate to application\nawait driver.get(\"http://localhost:3000\");\n//add item to list - locators\nawait driver\n  .findElement(By.id(\"itemText\"))\n  .sendKeys(\"Sunglasses\", Key.RETURN);\n//   Get item text added to the end of the list - for assertion\nlet itemAdded = await driver\n  .findElement(By.xpath(\"//li[last()]\"))\n  .getText();\n//assert using node assertion (built-in)\n// assert.strictEqual(itemAdded, \"1 Sunglasses\\n❌\");\n// assert(itemAdded.includes(\"Sunglasses\"));\n//     assert using Chai expect\nexpect(itemAdded).to.equal(\"1 Sunglasses\\n❌\");\n//     assert using Chai should\n//itemAdded.should.equal(\"1 Sunglasses\\n❌\");\n//   Close the browser\nawait driver.quit();",
              "err": {},
              "uuid": "64744be9-65ce-4d13-b09f-cb2ae98bca08",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64744be9-65ce-4d13-b09f-cb2ae98bca08"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12542,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "f3f92a60-8ddf-4220-81b6-1aeba732c201",
          "title": "add multiple tests",
          "fullFile": "/Users/bethhughes/Desktop/coding/projects/jet-set-go/test/testTwo.js",
          "file": "/test/testTwo.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "adds an item to the list",
              "fullTitle": "add multiple tests adds an item to the list",
              "timedOut": null,
              "duration": 12556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { expect } = await import(\"chai\");\n// const chai = await import(\"chai\");\n// const should = chai.should(); // Initialize 'should'\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n// navigate to application\nawait driver.get(\"http://localhost:3000\");\n//add item to list - locators\nawait driver\n  .findElement(By.id(\"itemText\"))\n  .sendKeys(\"Sunglasses\", Key.RETURN);\n//   Get item text added to the end of the list - for assertion\nlet itemAdded = await driver\n  .findElement(By.xpath(\"//li[last()]\"))\n  .getText();\n//assert using node assertion (built-in)\n// assert.strictEqual(itemAdded, \"1 Sunglasses\\n❌\");\n// assert(itemAdded.includes(\"Sunglasses\"));\n//     assert using Chai expect\nexpect(itemAdded).to.equal(\"1 Sunglasses\\n❌\");\n//     assert using Chai should\n//itemAdded.should.equal(\"1 Sunglasses\\n❌\");\n//   Close the browser\nawait driver.quit();",
              "err": {},
              "uuid": "05f84dc7-bfa4-4840-ba01-5832b45bb2a0",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "adds 2 items to the list",
              "fullTitle": "add multiple tests adds 2 items to the list",
              "timedOut": null,
              "duration": 9484,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { expect } = await import(\"chai\");\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n// navigate to application\nawait driver.get(\"http://localhost:3000\");\n//add 2 items to list - locators\nawait driver.findElement(By.id(\"quantitySelected\")).sendKeys(\"2\", Key.TAB);\nawait driver.findElement(By.id(\"itemText\")).sendKeys(\"Bikinis\", Key.RETURN);\n//   Get item text added to the end of the list - for assertion\nlet itemAdded = await driver\n  .findElement(By.xpath(\"//li[last()]\"))\n  .getText();\n//assert using node assertion (built-in)\n// assert.strictEqual(itemAdded, \"2 Bikinis\\n❌\");\n// assert(itemAdded.includes(\"Bikinis\"));\n//     assert using Chai expect\nexpect(itemAdded).to.equal(\"2 Bikinis\\n❌\");\n//     assert using Chai should\n//itemAdded.should.equal(\"2 Bikinis\\n❌\");\n//   Close the browser\nawait driver.quit();",
              "err": {},
              "uuid": "db043388-16ab-4d62-bf69-d5507f209914",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05f84dc7-bfa4-4840-ba01-5832b45bb2a0",
            "db043388-16ab-4d62-bf69-d5507f209914"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22040,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "/Users/bethhughes/Desktop/coding/projects/jet-set-go/test-reports",
        "reportFilename": "testResults"
      },
      "version": "6.2.0"
    }
  }
}